package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"
	"golang_saas/graph/model"
	"golang_saas/models"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, token string) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// CreateTenant is the resolver for the createTenant field.
func (r *mutationResolver) CreateTenant(ctx context.Context, input model.CreateTenantInput) (*models.Tenant, error) {
	panic(fmt.Errorf("not implemented: CreateTenant - createTenant"))
}

// UpdateTenant is the resolver for the updateTenant field.
func (r *mutationResolver) UpdateTenant(ctx context.Context, id string, input model.UpdateTenantInput) (*models.Tenant, error) {
	panic(fmt.Errorf("not implemented: UpdateTenant - updateTenant"))
}

// DeleteTenant is the resolver for the deleteTenant field.
func (r *mutationResolver) DeleteTenant(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTenant - deleteTenant"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input model.CreateRoleInput) (*models.Role, error) {
	panic(fmt.Errorf("not implemented: CreateRole - createRole"))
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id string, input model.UpdateRoleInput) (*models.Role, error) {
	panic(fmt.Errorf("not implemented: UpdateRole - updateRole"))
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRole - deleteRole"))
}

// AssignRole is the resolver for the assignRole field.
func (r *mutationResolver) AssignRole(ctx context.Context, input model.AssignRoleInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: AssignRole - assignRole"))
}

// AssignPermissions is the resolver for the assignPermissions field.
func (r *mutationResolver) AssignPermissions(ctx context.Context, input model.AssignPermissionInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: AssignPermissions - assignPermissions"))
}

// RevokePermissions is the resolver for the revokePermissions field.
func (r *mutationResolver) RevokePermissions(ctx context.Context, input model.AssignPermissionInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: RevokePermissions - revokePermissions"))
}

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input model.CreateCustomerInput) (*model.CustomerProfile, error) {
	panic(fmt.Errorf("not implemented: CreateCustomer - createCustomer"))
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *mutationResolver) UpdateCustomer(ctx context.Context, id string, input model.UpdateCustomerInput) (*model.CustomerProfile, error) {
	panic(fmt.Errorf("not implemented: UpdateCustomer - updateCustomer"))
}

// DeleteCustomer is the resolver for the deleteCustomer field.
func (r *mutationResolver) DeleteCustomer(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCustomer - deleteCustomer"))
}

// InitializeSystemRoles is the resolver for the initializeSystemRoles field.
func (r *mutationResolver) InitializeSystemRoles(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: InitializeSystemRoles - initializeSystemRoles"))
}

// InitializeTenantRoles is the resolver for the initializeTenantRoles field.
func (r *mutationResolver) InitializeTenantRoles(ctx context.Context, tenantID string) (bool, error) {
	panic(fmt.Errorf("not implemented: InitializeTenantRoles - initializeTenantRoles"))
}

// ID is the resolver for the id field.
func (r *permissionResolver) ID(ctx context.Context, obj *models.Permission) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Scope is the resolver for the scope field.
func (r *permissionResolver) Scope(ctx context.Context, obj *models.Permission) (model.PermissionScope, error) {
	panic(fmt.Errorf("not implemented: Scope - scope"))
}

// ID is the resolver for the id field.
func (r *planResolver) ID(ctx context.Context, obj *models.Plan) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Features is the resolver for the features field.
func (r *planResolver) Features(ctx context.Context, obj *models.Plan) (map[string]any, error) {
	panic(fmt.Errorf("not implemented: Features - features"))
}

// MaxUsers is the resolver for the maxUsers field.
func (r *planResolver) MaxUsers(ctx context.Context, obj *models.Plan) (int32, error) {
	panic(fmt.Errorf("not implemented: MaxUsers - maxUsers"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// MyPermissions is the resolver for the myPermissions field.
func (r *queryResolver) MyPermissions(ctx context.Context) ([]string, error) {
	panic(fmt.Errorf("not implemented: MyPermissions - myPermissions"))
}

// CheckPermission is the resolver for the checkPermission field.
func (r *queryResolver) CheckPermission(ctx context.Context, input model.PermissionCheckInput) (*model.PermissionCheck, error) {
	panic(fmt.Errorf("not implemented: CheckPermission - checkPermission"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, filter *model.UserFilter, pagination *model.PaginationInput) (*model.PaginatedUsers, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*models.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Tenants is the resolver for the tenants field.
func (r *queryResolver) Tenants(ctx context.Context, filter *model.TenantFilter, pagination *model.PaginationInput) (*model.PaginatedTenants, error) {
	panic(fmt.Errorf("not implemented: Tenants - tenants"))
}

// Tenant is the resolver for the tenant field.
func (r *queryResolver) Tenant(ctx context.Context, id string) (*models.Tenant, error) {
	panic(fmt.Errorf("not implemented: Tenant - tenant"))
}

// TenantBySlug is the resolver for the tenantBySlug field.
func (r *queryResolver) TenantBySlug(ctx context.Context, slug string) (*models.Tenant, error) {
	panic(fmt.Errorf("not implemented: TenantBySlug - tenantBySlug"))
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, tenantID *string, pagination *model.PaginationInput) (*model.PaginatedRoles, error) {
	panic(fmt.Errorf("not implemented: Roles - roles"))
}

// Role is the resolver for the role field.
func (r *queryResolver) Role(ctx context.Context, id string) (*models.Role, error) {
	panic(fmt.Errorf("not implemented: Role - role"))
}

// Permissions is the resolver for the permissions field.
func (r *queryResolver) Permissions(ctx context.Context, isSystem *bool, pagination *model.PaginationInput) (*model.PaginatedPermissions, error) {
	panic(fmt.Errorf("not implemented: Permissions - permissions"))
}

// Permission is the resolver for the permission field.
func (r *queryResolver) Permission(ctx context.Context, id string) (*models.Permission, error) {
	panic(fmt.Errorf("not implemented: Permission - permission"))
}

// RolePermissionMatrix is the resolver for the rolePermissionMatrix field.
func (r *queryResolver) RolePermissionMatrix(ctx context.Context) ([]*model.RolePermissionMatrix, error) {
	panic(fmt.Errorf("not implemented: RolePermissionMatrix - rolePermissionMatrix"))
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context, filter *model.UserFilter, pagination *model.PaginationInput) (*model.PaginatedCustomers, error) {
	panic(fmt.Errorf("not implemented: Customers - customers"))
}

// Customer is the resolver for the customer field.
func (r *queryResolver) Customer(ctx context.Context, id string) (*model.CustomerProfile, error) {
	panic(fmt.Errorf("not implemented: Customer - customer"))
}

// Plans is the resolver for the plans field.
func (r *queryResolver) Plans(ctx context.Context) ([]*models.Plan, error) {
	panic(fmt.Errorf("not implemented: Plans - plans"))
}

// Plan is the resolver for the plan field.
func (r *queryResolver) Plan(ctx context.Context, id string) (*models.Plan, error) {
	panic(fmt.Errorf("not implemented: Plan - plan"))
}

// SystemSettings is the resolver for the systemSettings field.
func (r *queryResolver) SystemSettings(ctx context.Context) ([]*models.SystemSettings, error) {
	panic(fmt.Errorf("not implemented: SystemSettings - systemSettings"))
}

// ID is the resolver for the id field.
func (r *roleResolver) ID(ctx context.Context, obj *models.Role) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// TenantID is the resolver for the tenantId field.
func (r *roleResolver) TenantID(ctx context.Context, obj *models.Role) (*string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// UsersCount is the resolver for the usersCount field.
func (r *roleResolver) UsersCount(ctx context.Context, obj *models.Role) (int32, error) {
	panic(fmt.Errorf("not implemented: UsersCount - usersCount"))
}

// ID is the resolver for the id field.
func (r *systemSettingsResolver) ID(ctx context.Context, obj *models.SystemSettings) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Value is the resolver for the value field.
func (r *systemSettingsResolver) Value(ctx context.Context, obj *models.SystemSettings) (map[string]any, error) {
	panic(fmt.Errorf("not implemented: Value - value"))
}

// ID is the resolver for the id field.
func (r *tenantResolver) ID(ctx context.Context, obj *models.Tenant) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Settings is the resolver for the settings field.
func (r *tenantResolver) Settings(ctx context.Context, obj *models.Tenant) (map[string]any, error) {
	panic(fmt.Errorf("not implemented: Settings - settings"))
}

// ID is the resolver for the id field.
func (r *tenantSubscriptionResolver) ID(ctx context.Context, obj *models.Subscription) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// TenantID is the resolver for the tenantId field.
func (r *tenantSubscriptionResolver) TenantID(ctx context.Context, obj *models.Subscription) (string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// PlanID is the resolver for the planId field.
func (r *tenantSubscriptionResolver) PlanID(ctx context.Context, obj *models.Subscription) (string, error) {
	panic(fmt.Errorf("not implemented: PlanID - planId"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// TenantID is the resolver for the tenantId field.
func (r *userResolver) TenantID(ctx context.Context, obj *models.User) (*string, error) {
	panic(fmt.Errorf("not implemented: TenantID - tenantId"))
}

// DirectPermissions is the resolver for the directPermissions field.
func (r *userResolver) DirectPermissions(ctx context.Context, obj *models.User) ([]*models.Permission, error) {
	panic(fmt.Errorf("not implemented: DirectPermissions - directPermissions"))
}

// AllPermissions is the resolver for the allPermissions field.
func (r *userResolver) AllPermissions(ctx context.Context, obj *models.User) ([]string, error) {
	panic(fmt.Errorf("not implemented: AllPermissions - allPermissions"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Permission returns PermissionResolver implementation.
func (r *Resolver) Permission() PermissionResolver { return &permissionResolver{r} }

// Plan returns PlanResolver implementation.
func (r *Resolver) Plan() PlanResolver { return &planResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Role returns RoleResolver implementation.
func (r *Resolver) Role() RoleResolver { return &roleResolver{r} }

// SystemSettings returns SystemSettingsResolver implementation.
func (r *Resolver) SystemSettings() SystemSettingsResolver { return &systemSettingsResolver{r} }

// Tenant returns TenantResolver implementation.
func (r *Resolver) Tenant() TenantResolver { return &tenantResolver{r} }

// TenantSubscription returns TenantSubscriptionResolver implementation.
func (r *Resolver) TenantSubscription() TenantSubscriptionResolver {
	return &tenantSubscriptionResolver{r}
}

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type permissionResolver struct{ *Resolver }
type planResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type roleResolver struct{ *Resolver }
type systemSettingsResolver struct{ *Resolver }
type tenantResolver struct{ *Resolver }
type tenantSubscriptionResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
