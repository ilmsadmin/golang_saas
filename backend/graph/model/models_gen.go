// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"golang_saas/models"
)

type AuthPayload struct {
	Token        string         `json:"token"`
	RefreshToken string         `json:"refreshToken"`
	User         *models.User   `json:"user"`
	Tenant       *models.Tenant `json:"tenant,omitempty"`
}

type CreateRoleInput struct {
	Name          string   `json:"name"`
	Description   *string  `json:"description,omitempty"`
	PermissionIds []string `json:"permissionIds"`
}

type CreateTenantInput struct {
	Name           string  `json:"name"`
	Slug           string  `json:"slug"`
	Domain         *string `json:"domain,omitempty"`
	Subdomain      string  `json:"subdomain"`
	AdminEmail     string  `json:"adminEmail"`
	AdminPassword  string  `json:"adminPassword"`
	AdminFirstName string  `json:"adminFirstName"`
	AdminLastName  string  `json:"adminLastName"`
	PlanID         string  `json:"planId"`
}

type CreateUserInput struct {
	Email     string `json:"email"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Password  string `json:"password"`
	RoleID    string `json:"roleId"`
}

type LoginInput struct {
	Email      string  `json:"email"`
	Password   string  `json:"password"`
	TenantSlug *string `json:"tenantSlug,omitempty"`
}

type Mutation struct {
}

type PaginatedTenants struct {
	Tenants    []*models.Tenant `json:"tenants"`
	Total      int32            `json:"total"`
	Page       int32            `json:"page"`
	Limit      int32            `json:"limit"`
	TotalPages int32            `json:"totalPages"`
}

type PaginatedUsers struct {
	Users      []*models.User `json:"users"`
	Total      int32          `json:"total"`
	Page       int32          `json:"page"`
	Limit      int32          `json:"limit"`
	TotalPages int32          `json:"totalPages"`
}

type PaginationInput struct {
	Page  *int32 `json:"page,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
}

type Query struct {
}

type RegisterInput struct {
	Email      string  `json:"email"`
	Password   string  `json:"password"`
	FirstName  string  `json:"firstName"`
	LastName   string  `json:"lastName"`
	TenantSlug *string `json:"tenantSlug,omitempty"`
}

type TenantFilter struct {
	Status *models.TenantStatus `json:"status,omitempty"`
	Name   *string              `json:"name,omitempty"`
}

type UpdateRoleInput struct {
	Name          *string  `json:"name,omitempty"`
	Description   *string  `json:"description,omitempty"`
	PermissionIds []string `json:"permissionIds,omitempty"`
}

type UpdateTenantInput struct {
	Name     *string              `json:"name,omitempty"`
	Domain   *string              `json:"domain,omitempty"`
	Status   *models.TenantStatus `json:"status,omitempty"`
	Settings map[string]any       `json:"settings,omitempty"`
}

type UpdateUserInput struct {
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	IsActive  *bool   `json:"isActive,omitempty"`
	RoleID    *string `json:"roleId,omitempty"`
}

type UserFilter struct {
	Email    *string `json:"email,omitempty"`
	IsActive *bool   `json:"isActive,omitempty"`
	RoleID   *string `json:"roleId,omitempty"`
	TenantID *string `json:"tenantId,omitempty"`
}
