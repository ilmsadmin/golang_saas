# GraphQL Schema for Multi-Tenant SaaS Platform

scalar Time
scalar JSON

# Authentication Types
type AuthPayload {
  token: String!
  refreshToken: String!
  user: User!
  tenant: Tenant
  permissions: [String!]!
}

# User Types
type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  isActive: Boolean!
  role: Role!
  tenantId: ID
  tenant: Tenant
  permissions: [Permission!]!
  directPermissions: [Permission!]!
  allPermissions: [String!]!
  createdAt: Time!
  updatedAt: Time!
}

type Role {
  id: ID!
  name: String!
  description: String
  permissions: [Permission!]!
  isSystemRole: Boolean!
  tenantId: ID
  tenant: Tenant
  users: [User!]!
  usersCount: Int!
  createdAt: Time!
  updatedAt: Time!
}

type Permission {
  id: ID!
  name: String!
  resource: String!
  action: String!
  description: String
  isSystemPermission: Boolean!
  scope: PermissionScope!
  roles: [Role!]!
  users: [User!]!
  createdAt: Time!
  updatedAt: Time!
}

# RBAC Types
type CustomerProfile {
  id: ID!
  tenantId: ID!
  email: String!
  firstName: String!
  lastName: String!
  phone: String
  address: JSON
  preferences: JSON
  isActive: Boolean!
  tags: JSON
  metadata: JSON
  tenant: Tenant!
  createdAt: Time!
  updatedAt: Time!
}

type RolePermissionMatrix {
  role: String!
  permissions: [String!]!
}

type PermissionCheck {
  hasPermission: Boolean!
  permission: String!
  reason: String
}

# Tenant Types
type Tenant {
  id: ID!
  name: String!
  slug: String!
  domain: String
  subdomain: String!
  status: TenantStatus!
  settings: JSON
  users: [User!]!
  roles: [Role!]!
  subscription: TenantSubscription
  createdAt: Time!
  updatedAt: Time!
}

type TenantSubscription {
  id: ID!
  tenantId: ID!
  planId: ID!
  status: SubscriptionStatus!
  currentPeriodStart: Time!
  currentPeriodEnd: Time!
  tenant: Tenant!
  plan: Plan!
  createdAt: Time!
  updatedAt: Time!
}

type Plan {
  id: ID!
  name: String!
  description: String
  price: Float!
  features: JSON!
  maxUsers: Int!
  subscriptions: [TenantSubscription!]!
  createdAt: Time!
  updatedAt: Time!
}

# System Admin Types
type SystemSettings {
  id: ID!
  key: String!
  value: JSON!
  description: String
  createdAt: Time!
  updatedAt: Time!
}

# Enums
enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum PermissionScope {
  SYSTEM
  TENANT
  OWN
}

enum SystemRole {
  SUPER_ADMIN
  SYSTEM_ADMIN
  SYSTEM_MANAGER
  SYSTEM_SUPPORT
  TENANT_ADMIN
  TENANT_MANAGER
  TENANT_USER
  CUSTOMER
}

enum ResourceType {
  SYSTEM
  TENANT
  PLAN
  MODULE
  USER
  ROLE
  PERMISSION
  SUBSCRIPTION
  SYSTEM_SETTING
  AUDIT_LOG
  TENANT_USER
  TENANT_SETTING
  TENANT_MODULE
  DOMAIN_MAPPING
  TENANT_DATA
  CUSTOMER
  REPORT
  DASHBOARD
}

enum ActionType {
  CREATE
  READ
  UPDATE
  DELETE
  LIST
  MANAGE
  VIEW
  EXPORT
  IMPORT
}

# Input Types
input RegisterInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  tenantSlug: String
}

input LoginInput {
  email: String!
  password: String!
  tenantSlug: String
}

input CreateTenantInput {
  name: String!
  slug: String!
  domain: String
  subdomain: String!
  adminEmail: String!
  adminPassword: String!
  adminFirstName: String!
  adminLastName: String!
  planId: ID!
}

input UpdateTenantInput {
  name: String
  domain: String
  status: TenantStatus
  settings: JSON
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  roleId: ID!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  isActive: Boolean
  roleId: ID
}

input CreateRoleInput {
  name: String!
  description: String
  permissionIds: [ID!]!
  tenantId: ID
}

input UpdateRoleInput {
  name: String
  description: String
  permissionIds: [ID!]
}

input AssignRoleInput {
  userId: ID!
  roleId: ID!
}

input AssignPermissionInput {
  userId: ID!
  permissionIds: [ID!]!
}

input CreateCustomerInput {
  tenantId: ID!
  email: String!
  firstName: String!
  lastName: String!
  phone: String
  address: JSON
  preferences: JSON
  tags: JSON
  metadata: JSON
}

input UpdateCustomerInput {
  firstName: String
  lastName: String
  phone: String
  address: JSON
  preferences: JSON
  isActive: Boolean
  tags: JSON
  metadata: JSON
}

input PermissionCheckInput {
  permission: String!
  tenantId: ID
}

# Filters and Pagination
input UserFilter {
  email: String
  isActive: Boolean
  roleId: ID
  tenantId: ID
}

input TenantFilter {
  status: TenantStatus
  name: String
}

input PaginationInput {
  page: Int = 1
  limit: Int = 10
}

type PaginatedUsers {
  users: [User!]!
  total: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
}

type PaginatedTenants {
  tenants: [Tenant!]!
  total: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
}

type PaginatedCustomers {
  customers: [CustomerProfile!]!
  total: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
}

type PaginatedRoles {
  roles: [Role!]!
  total: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
}

type PaginatedPermissions {
  permissions: [Permission!]!
  total: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
}

# Root Types
type Query {
  # Authentication
  me: User
  myPermissions: [String!]!
  checkPermission(input: PermissionCheckInput!): PermissionCheck!

  # Users
  users(filter: UserFilter, pagination: PaginationInput): PaginatedUsers!
  user(id: ID!): User
  
  # Tenants
  tenants(filter: TenantFilter, pagination: PaginationInput): PaginatedTenants!
  tenant(id: ID!): Tenant
  tenantBySlug(slug: String!): Tenant
  
  # Roles & Permissions
  roles(tenantId: ID, pagination: PaginationInput): PaginatedRoles!
  role(id: ID!): Role
  permissions(isSystem: Boolean, pagination: PaginationInput): PaginatedPermissions!
  permission(id: ID!): Permission
  rolePermissionMatrix: [RolePermissionMatrix!]!
  
  # Customers (Tenant specific)
  customers(filter: UserFilter, pagination: PaginationInput): PaginatedCustomers!
  customer(id: ID!): CustomerProfile
  
  # Plans
  plans: [Plan!]!
  plan(id: ID!): Plan
  
  # System (Admin only)
  systemSettings: [SystemSettings!]!
}

type Mutation {
  # Authentication
  register(input: RegisterInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  refreshToken(token: String!): AuthPayload!
  logout: Boolean!
  
  # Tenant Management (System Admin)
  createTenant(input: CreateTenantInput!): Tenant!
  updateTenant(id: ID!, input: UpdateTenantInput!): Tenant!
  deleteTenant(id: ID!): Boolean!
  
  # User Management
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  
  # Role Management
  createRole(input: CreateRoleInput!): Role!
  updateRole(id: ID!, input: UpdateRoleInput!): Role!
  deleteRole(id: ID!): Boolean!
  assignRole(input: AssignRoleInput!): User!
  
  # Permission Management
  assignPermissions(input: AssignPermissionInput!): User!
  revokePermissions(input: AssignPermissionInput!): User!
  
  # Customer Management (Tenant specific)
  createCustomer(input: CreateCustomerInput!): CustomerProfile!
  updateCustomer(id: ID!, input: UpdateCustomerInput!): CustomerProfile!
  deleteCustomer(id: ID!): Boolean!
  
  # System Management
  initializeSystemRoles: Boolean!
  initializeTenantRoles(tenantId: ID!): Boolean!
}
